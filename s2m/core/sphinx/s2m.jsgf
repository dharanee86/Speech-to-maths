#JSGF V0;

grammar speech-to-math-v0;

public <expression> = ouvrez la parenthèse <expressionalias> fermez la parenthèse | <number> | cent | <bigoperator-operator> <bigoperator-of> <expressionalias> | bravo | zéro | mille | cinq | blanc | octante | septante | seize | curseur | soixante | quarante | six | sept | uniform | nonante | echo | <number-prefix> <number-prefix> | un | trente | vingt | cinquante | entre parenthèse <expressionalias> | huit | yankee | quelque chose | <expressionalias> au carré | <unaryoperator-operator> <expressionalias> | neuf | deux | alpha | <expressionalias> <binaryoperator-operator> <expressionalias> | charlie | treize | <bigoperator-operator> <bigoperator-from> <expressionalias> <bigoperator-of> <expressionalias> | douze | un blanc | trois | onze | quatorze | delta | <bigoperator-operator> <bigoperator-from> <expressionalias> à <expressionalias> <bigoperator-of> <expressionalias> | quatre | zulu | quinze | xray | dix;

<lt99> = <safedozen> <safedigit> | soixante et un | <safedozen> et un | <gt11lt19> | quatre vingt <safedigit> | soixante dix | soixante <safedigit> | soixante et onze | quatre vingt | soixante <gt12lt19> | quatre vingt dix | quatre vingt un | quatre vingt onze | quatre vingt <gt12lt19> | <digit>;

<integers> = <gt999999> [<lt999999>] | <lt999999>;

<bigoperator-operator> = intersection | produit | somme | intégrale | union;

<gt11lt19> = <gt12lt19> | onze;

<bigoperator-from> = de | sur | pour;

<binaryoperator-operator> = plus ou moins | plus | de | supérieur à | rond | puissance | inférieur à | fois | égal | inclus dans | moins ou plus | sur | divisé par | différent de | environ égal à | contient | équivaut à | vectoriel | moins;

<gt12lt19> = douze | dix neuf | seize | quatorze | dix huit | dix sept | quinze | treize;

<safedozen> = quarante | nonante | octante | septante | trente | vingt | cinquante;

<powers> = septillion | décilliard | quintilliard | octillion | quadrilliard | trillion | million | sextillion | quintillion | décillion | quadrillion | milliard | nonilliard | octilliard | septilliard | sextilliard | billion | nonillion | trilliard;

<expressionalias> = <expression>;

<lt999> = [ [<safedigit>] cent ] <lt99>;

<number> = zéro | <lt999999>;

<gt999999> = <lt999> <powers> [<gt999999>];

<lt999999> = [ [<lt999>] mille ] <lt999>;

<suite> = <integers> [<suite>];

<decimal> = <comma> <suite>;

<unaryoperator-operator> = valeur absolu de | racine de | racine cubique de | racine carré de | moins;

<digit> = <safedigit> | un;

<bigoperator-of> = des | de;

<comma> = virgule | point;

<number-prefix/reduce> = cent | quadrilliard | zéro | mille | trillion | million | cinq | quadrillion | octante | septante | seize | sextilliard | soixante | quarante | billiard | quintilliard | octillion | six | sept | sextillion | nonante | milliard | nonilliard | un | septilliard | virgule | trente | vingt | cinquante | point | décilliard | huit | quintillion | décillion | neuf | deux | octilliard | billion | treize | septillion | douze | onze | trois | quatorze | quatre | et | quinze | nonillion | dix | trilliard;

<number-prefix> = <number-prefix> <number-prefix>;

<safedigit> = huit | six | sept | cinq | trois | neuf | quatre | deux;

<numbers> = <integers> [<decimal>];